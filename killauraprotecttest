{$asm}
[ENABLE]

aobscanmodule(25blockaura,libSandboxEngine.dll,74 ?? F3 ?? ?? ?? ?? 8D ?? ?? 50 51 8B ?? C6 ?? ?? ?? F3 ?? ?? ?? ?? E8 ?? ?? ?? ?? 80 ?? ?? ?? 0F 85 ?? ?? ?? ?? 8B ?? 8B ?? 8B ?? ?? FF ?? 84 ?? 0F 84 ?? ?? ?? ??) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
newmem:
pushad
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+000004D0]
cmp ecx,00
popad
je code
pushad
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov edx,[ecx+00000270]
mov edi,[edx+000000DC]
mov ebx,[edx+000000E0]
mov ebp,[edx+000000E4]
mov edx,ecx
sub esp,0C
push 00
push [libSandboxEngine.g_pPlayerCtrl]
mov ecx,[libMiniBaseGame.dll+B36C]
mov ecx,[ecx+78]
mov ecx,[ecx+08]
mov esi,[edx+00000524]
mov [esp+08],esi
mov esi,[edx+00000528]
mov [esp+0C],esi
sub dword ptr [esp+0C],64
mov esi,[edx+0000052C]
mov [esp+10],esi
mov eax,libiworld.dll+1BB6F0
call eax
push 00
push 00
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
push [ecx+000004D0]
mov eax,libSandboxEngine.MpPlayerControl::interactActor
call eax
push 00
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+000009C4]
mov eax,libSandboxEngine.PlayerAnimation::performDig
call eax
sub esp,0C
push 00
push [libSandboxEngine.g_pPlayerCtrl]
mov ecx,[libMiniBaseGame.dll+B36C]
mov ecx,[ecx+78]
mov ecx,[ecx+08]
mov [esp+08],edi
mov [esp+0C],ebx
mov [esp+10],ebp
mov eax,libiworld.dll+1BB6F0
call eax
popad
code:
  movss xmm0,[ebp+08]
  jmp return

25blockaura+02:
  jmp newmem
return:
registersymbol(25blockaura)

[DISABLE]

25blockaura+02:
  db F3 0F 10 45 08

unregistersymbol(25blockaura)
dealloc(newmem)

{
F3 ?? ?? ?? ?? 8D ?? ?? 50 51 8B ?? C6 ?? ?? ?? F3 ?? ?? ?? ?? E8 ?? ?? ?? ?? 80 ?? ?? ?? 0F 85 ?? ?? ?? ?? 8B ?? 8B ??

// ORIGINAL CODE - INJECTION POINT: libSandboxEngine.ActionIdleState::updateOnPC+280

libSandboxEngine.ActionIdleState::updateOnPC+25F: F3 0F 11 04 24     - movss [esp],xmm0
libSandboxEngine.ActionIdleState::updateOnPC+264: E8 37 06 00 00     - call libSandboxEngine.ActionIdleState::updateOnPCForRightClick
libSandboxEngine.ActionIdleState::updateOnPC+269: 80 7D FF 00        - cmp byte ptr [ebp-01],00
libSandboxEngine.ActionIdleState::updateOnPC+26D: 0F 85 62 FE FF FF  - jne libSandboxEngine.ActionIdleState::updateOnPC+D5
libSandboxEngine.ActionIdleState::updateOnPC+273: 8B 06              - mov eax,[esi]
libSandboxEngine.ActionIdleState::updateOnPC+275: 8B CE              - mov ecx,esi
libSandboxEngine.ActionIdleState::updateOnPC+277: 8B 40 58           - mov eax,[eax+58]
libSandboxEngine.ActionIdleState::updateOnPC+27A: FF D0              - call eax
libSandboxEngine.ActionIdleState::updateOnPC+27C: 84 C0              - test al,al
libSandboxEngine.ActionIdleState::updateOnPC+27E: 74 24              - je libSandboxEngine.ActionIdleState::updateOnPC+2A4
// ---------- INJECTING HERE ----------
libSandboxEngine.ActionIdleState::updateOnPC+280: F3 0F 10 45 08     - movss xmm0,[ebp+08]
// ---------- DONE INJECTING  ----------
libSandboxEngine.ActionIdleState::updateOnPC+285: 8D 45 FF           - lea eax,[ebp-01]
libSandboxEngine.ActionIdleState::updateOnPC+288: 50                 - push eax
libSandboxEngine.ActionIdleState::updateOnPC+289: 51                 - push ecx
libSandboxEngine.ActionIdleState::updateOnPC+28A: 8B CE              - mov ecx,esi
libSandboxEngine.ActionIdleState::updateOnPC+28C: C6 45 FF 01        - mov byte ptr [ebp-01],01
libSandboxEngine.ActionIdleState::updateOnPC+290: F3 0F 11 04 24     - movss [esp],xmm0
libSandboxEngine.ActionIdleState::updateOnPC+295: E8 06 01 00 00     - call libSandboxEngine.ActionIdleState::updateOnPCForLeftClickDown
libSandboxEngine.ActionIdleState::updateOnPC+29A: 80 7D FF 00        - cmp byte ptr [ebp-01],00
libSandboxEngine.ActionIdleState::updateOnPC+29E: 0F 85 31 FE FF FF  - jne libSandboxEngine.ActionIdleState::updateOnPC+D5
libSandboxEngine.ActionIdleState::updateOnPC+2A4: 8B 06              - mov eax,[esi]
}
